//imports que precisamos:
import java.util.Scanner;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class MackShop {

    // VARIÁVEIS GLOBAIS!!!!
    
    // catálogo de produtos
    static int[] idsProdutos = new int[100];
    static String[] nomesProdutos = new String[100];
    static double[] precosProdutos = new double[100];
    static int[] estoquesProdutos = new int[100];
    static int totalProdutos = 0;
    
    // venda atual
    static int[] vendaAtualIds = new int[50];
    static int[] vendaAtualQuantidades = new int[50];
    static int totalItensVendaAtual = 0;
    
    // histórico de vendas - 
    static int[] historicoIdsPedidos = new int[200];
    static double[] historicoValoresPedidos = new double[200];
    static int[][] historicoItensVendidos = new int[500][3];
    static int totalPedidos = 0;
    static int totalItensHistorico = 0;

    // controles
    static boolean baseInicializada = false;

    static boolean validarBase() {
        if(baseInicializada) {
            return true;
        } else {
            System.out.println("A base de produtos não foi inicializada. Por favor, digite o némero 1 .");
            return false;
        }
    }

    //  inicializa a base de produtos - adicionei mais 2 produtos so pra ter mais opção mesmo!!! 
    public static void inicializarBase() {
        
        // produto 1 - mouse gamer
        idsProdutos[0] = 1;
        nomesProdutos[0] = "Mouse Gamer";
        precosProdutos[0] = 150.00;
        estoquesProdutos[0] = 12;
        
        // produto - teclado
        idsProdutos[1] = 2;
        nomesProdutos[1] = "Teclado Mecânico";
        precosProdutos[1] = 350.00;
        estoquesProdutos[1] = 7;
        
        // produto 3 - headset
        idsProdutos[2] = 3;
        nomesProdutos[2] = "Headset 7.1";
        precosProdutos[2] = 420.50;
        estoquesProdutos[2] = 12;

        // produto 4 - cadeira 
        idsProdutos[3] = 4;
        nomesProdutos[3] = "Cadeira Gamer";
        precosProdutos[3] = 800.00;
        estoquesProdutos[3] = 10;

        // produto 5 - mousepad
        idsProdutos[4] = 5;
        nomesProdutos[4] = "Mousepad";
        precosProdutos[4] = 45.00;
        estoquesProdutos[4] = 20;
        
        
        
        // todos os produtos que temos
        totalProdutos = 5;
        baseInicializada = true;
        System.out.println("A base foi inicializada com " + totalProdutos + " produtos!");
    }

    // exibe os produtos - Catálogo  
    public static void exibirCatalogo() {
        
        System.out.println("\nCatálogo de produtos:");
        
        System.out.println("ID | Nome:                | Preço (R$): | Estoque:");
        
        System.out.println("----------------------------------------------------");
        
        for (int i = 0; i < totalProdutos; i++) {
            System.out.printf("%-3d| %-20s | %-10.2f | %d\n", idsProdutos[i], nomesProdutos[i], precosProdutos[i], estoquesProdutos[i]);
        }
        System.out.println();
    }

    // adiciona item à venda atual - muita dificuldade na lógica!!!
    
    public static void adicionarItemVenda(Scanner input) {
        if (!validarBase()) return;

        System.out.print("Digite o ID do produto: ");
        int id = input.nextInt();

        int pos = -1; 
        
        for (int i = 0; i < totalProdutos; i++) { 
            if (idsProdutos[i] == id) {
                pos = i;
                break;
            }
        }
        if (pos == -1) {
            System.out.println("Produto não encontrado!");
            return;
        }

        System.out.print("Digite a quantidade desejada: ");
        int qtd = input.nextInt();
        if (qtd > estoquesProdutos[pos]) {
            System.out.println("Quantidade maior que o estoque disponível!");
            return;
        }
//
        vendaAtualIds[totalItensVendaAtual] = id;
        vendaAtualQuantidades[totalItensVendaAtual] = qtd;
        totalItensVendaAtual++;
        System.out.println("Adicionado: " + nomesProdutos[pos] + " (Qtd: " + qtd + ")");
    }

    // resumo da venda atual - dificuldade na lógica
    
    public static void resumoVendaAtual() {
        if (!validarBase()) return;
        if (totalItensVendaAtual == 0) {
            System.out.println("Nenhum item na venda atual.");
            return;
        }

        double total = 0;
        System.out.println("\nResumo da venda atual:");
        System.out.println("ID | Produto:             | Qtd: | Unitário: | Subtotal:");
        
        System.out.println("---------------------------------------------------------");
        for (int i = 0; i < totalItensVendaAtual; i++) {
            int id = vendaAtualIds[i];
            int qtd = vendaAtualQuantidades[i];
            int pos = -1;
            for (int j = 0; j < totalProdutos; j++) {
                if (idsProdutos[j] == id) {
                    pos = j;
                    break;
                }
            }
            if (pos != -1) {
                double subtotal = precosProdutos[pos] * qtd;
                total += subtotal;
                System.out.printf("%-3d| %-20s | %-3d | %-8.2f | %-8.2f\n", id, nomesProdutos[pos], qtd, precosProdutos[pos], subtotal); // alinhamento, chamando o tipo e deixando so duas casas decimais :)
                }
        }
        System.out.println("-------------------------------------------------------------");
        System.out.printf("TOTAL DA VENDA: R$ %.2f\n\n", total);
    }

    // finalizar venda - loop de for meio complicado na lógica
    public static void finalizarVenda() {
        if (!validarBase()) return;
        if (totalItensVendaAtual == 0) {
            System.out.println("Nenhum item para finalizar.");
            return;
        }

        int idPedido = 1000 + totalPedidos + 1;
        double totalVenda = 0;



        for (int i = 0; i < totalItensVendaAtual; i++) {
            int idProd = vendaAtualIds[i];
            int qtd = vendaAtualQuantidades[i];
            int pos = -1;
            for (int j = 0; j < totalProdutos; j++) {
                if (idsProdutos[j] == idProd) {
                    pos = j;
                    break;
                }
            }
            if (pos != -1) {
                double subtotal = precosProdutos[pos] * qtd;
                totalVenda += subtotal;
                estoquesProdutos[pos] -= qtd;

                historicoItensVendidos[totalItensHistorico][0] = idPedido;
                historicoItensVendidos[totalItensHistorico][1] = idProd;
                historicoItensVendidos[totalItensHistorico][2] = qtd;
                totalItensHistorico++;
            }
        }

        historicoIdsPedidos[totalPedidos] = idPedido;
        historicoValoresPedidos[totalPedidos] = totalVenda;
        totalPedidos++;

        imprimirNotaFiscal(idPedido);
        totalItensVendaAtual = 0;
        System.out.println("Venda finalizada com sucesso!!\n");
    }

    // imprimir Nota Fiscal
    public static void imprimirNotaFiscal(int idPedido) {
        if (!validarBase()) return;

        LocalDateTime dataHora = LocalDateTime.now();
        DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");

        System.out.println("*********************************************************************************************");
        System.out.println("*                                   MACKSHOP                                              *");
        System.out.println("*                               CNPJ: 12.345.678/0001-99                                   *");
        System.out.println("*********************************************************************************************");
        System.out.println("* NOTA FISCAL - VENDA AO CONSUMIDOR                                                          *");
        System.out.println("* Pedido ID: " + idPedido + "                                                             *");
        System.out.println("* Data de Emissão: " + dataHora.format(formato) + "                                       *");
        System.out.println("*********************************************************************************************");
        System.out.println("# | ID: | DESCRIÇÃO:           | QTD: | VL. UNIT.: | VL. TOTAL:");
        System.out.println("-----------------------------------------------------------------------------------------------------------");

        double total = 0;
        int contador = 1;

//looping mais complicado 
        for (int i = 0; i < totalItensHistorico; i++) {
            if (historicoItensVendidos[i][0] == idPedido) {
                int idProd = historicoItensVendidos[i][1];
                int qtd = historicoItensVendidos[i][2];
                int pos = -1;
                for (int j = 0; j < totalProdutos; j++) {
                    if (idsProdutos[j] == idProd) {
                        pos = j;
                        break;
                    }
                }
                if (pos != -1) {
                    double subtotal = precosProdutos[pos] * qtd;
                    total += subtotal;
                    System.out.printf("%d | %d | %-18s | %-3d | R$ %-8.2f | R$ %-8.2f\n", contador, idProd, nomesProdutos[pos], qtd, precosProdutos[pos], subtotal);
                    contador++;
                }
            }
        }
        System.out.println("-----------------------------------------------------------------------------------------------------------");
        System.out.printf("SUBTOTAL | R$ %.2f\n", total);
        System.out.printf("TOTAL    | R$ %.2f\n", total);
        System.out.println("*********************************************************************************************");
        System.out.println("* OBRIGADO PELA PREFERÊNCIA :)                                                  *");
        System.out.println("*********************************************************************************************\n");
    }

    // ver histórico de vendas
    public static void verHistorico() {
        if(totalPedidos == 0) {
            System.out.println("Nenhum pedido finalizado ainda.");
            return;
        }
        System.out.println("\nHistórico de vendas:");
        for(int i = 0; i < totalPedidos; i++) {
            System.out.printf("Pedido ID: %d | Total: R$ %.2f\n", historicoIdsPedidos[i], historicoValoresPedidos[i]);
        }
        System.out.println();
    }

    // buscar venda específica
    public static void buscarVendaEspecifica(Scanner input) {
        System.out.print("Digite o ID do pedido: ");
        int id = input.nextInt();
        boolean encontrado = false; // so tem num inteiro ai isso aqui valida
        
        
        for(int i = 0; i < totalPedidos; i++) {
            if(historicoIdsPedidos[i] == id) {
                imprimirNotaFiscal(id);
                encontrado = true;
                break;
            }
        }
        if(!encontrado) {
            System.out.println("Pedido não encontrado!");
        }
    }

    // admin - reposiçao do estoque
    public static void reporEstoque(Scanner input) {
        System.out.print("Digite o ID do produto: ");
        int id = input.nextInt();
        System.out.print("Quantidade a adicionar: ");
        int qtd = input.nextInt();

        for(int i = 0; i < totalProdutos; i++) {
            if(idsProdutos[i] == id) {
                estoquesProdutos[i] += qtd;
                System.out.println("Estoque atualizado: " + nomesProdutos[i] + " - " + estoquesProdutos[i] + " unidades");
                return;
            }
        }
        System.out.println("Produto não encontrado!");
    }

    // admin - relatório de estoque quando tem menos und.
    public static void relatorioEstoqueBaixo() {
        System.out.println("Produtos com estoque baixo (<10 unidades):");
        for(int i = 0; i < totalProdutos; i++) {
            if(estoquesProdutos[i] < 10) {
                System.out.println(idsProdutos[i] + " | " + nomesProdutos[i] + " | Estoque: " + estoquesProdutos[i]);
            }
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int opcao;


// parte mais facil!!!
        while(true) {
            System.out.println("Menu:");
            System.out.println("1. Inicializar base (!obrigatoriamente a primeira!)");
            System.out.println("2. Exibir catálogo de produtos");
            System.out.println("3. Adicionar item à venda");
            System.out.println("4. Ver resumo da venda atual");
            System.out.println("5. Finalizar venda (gerar histórico e Nota Fiscal)");
            System.out.println("6. Ver histórico de vendas");
            System.out.println("7. Buscar venda específica do histórico");
            System.out.println("8. (Admin) Repor estoque");
            System.out.println("9. (Admin) Relatório de estoque baixo");
            System.out.print("Digite um número: ");
            opcao = input.nextInt();
            input.nextLine(); // limpar buffer

            switch(opcao) {
                case 1:
                    inicializarBase();
                    break;
                case 2:
                    if(validarBase()) exibirCatalogo();
                    break;
                case 3:
                    adicionarItemVenda(input);
                    break;
                case 4:
                    resumoVendaAtual();
                    break;
                case 5:
                    finalizarVenda();
                    break;
                case 6:
                    verHistorico();
                    break;
                case 7:
                    buscarVendaEspecifica(input);
                    break;
                case 8:
                    reporEstoque(input);
                    break;
                case 9:
                    relatorioEstoqueBaixo();
                    break;
                default:
                    System.out.println("Opção inválida!");
                    break;
            }
        }
    }
}
